type Mutation {
  userLogin(
    input: UserLoginInput!
  ): UserLoginOutput
}

type Mutation {
  userLogout: UserLogoutOutput
}

type Mutation {
  userRegister(
    input: UserRegisterInput!
  ): UserRegisterOutput
}

enum ERole {
  SYSTEM
  RESTAURANT_ADMIN
  RESTAURANT_STAFF
  USER
}

input UserLoginInput {
  email: String!
  password: String!
}

input UserRegisterInput {
  email: String!
  password: String!
  role: ERole!
}

type IResponseAuthUser {
  id: Int
  email: String
  role: ERole
}

type UserLoginOutputData {
  user: IResponseAuthUser
  accessToken: String!
}

type UserLoginOutput {
  statusCode: Int
  data: UserLoginOutputData
  errorMessage: String
  errorCode: String
  timestamp: String
}

type UserLogoutOutput {
  statusCode: Int
  data: Boolean
  errorMessage: String
  errorCode: String
  timestamp: String
}

type UserRegisterOutputData {
  id: Int!
  email: String!
  restaurantId: Int
  role: ERole!
}

type UserRegisterOutput {
  statusCode: Int
  data: UserRegisterOutputData
  errorMessage: String
  errorCode: String
  timestamp: String
}

